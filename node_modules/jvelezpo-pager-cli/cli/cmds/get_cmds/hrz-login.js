'use strict';

const axios = require('axios');

const envs = {
    dev: {
        horizon: 'https://pit.api.horizonblue.com/webseal/webseal',
        horizonClientId: 'yABAmd1bmyGu3AA9uWT3E1jvBnDbCqdp',
        pager: 'https://hrz-dev-api-horizon.pagerinc.com'
    },
    qa: {
        horizon: 'https://pit.api.horizonblue.com/webseal/webseal',
        horizonClientId: 'yABAmd1bmyGu3AA9uWT3E1jvBnDbCqdp',
        pager: 'https://hrz-qa-api-horizon.pagerinc.com'
    },
    staging: {
        horizon: 'https://pit.api.horizonblue.com/webseal/webseal',
        horizonClientId: 'yABAmd1bmyGu3AA9uWT3E1jvBnDbCqdp',
        pager: 'https://hrz-stage-api-horizon.pagerinc.com'
    },
    production: {
        horizon: 'https://secure.horizonblue.com',
        horizonClientId: 'CcR0CDGS8Cb3Cv6GBvWjMxEcoSarXwSJ',
        pager: 'https://hrz-api-horizon.pager.com'
    }
};

exports.command = 'hrz-login [username] [password] [environment]';

exports.desc = 'Horizon Armor Token Generator';

exports.builder = {
    username: {
        required: true
    },
    password: {
        required: true
    },
    environment: {
        required: false,
        default: 'qa'
    }
};

const loginHorizon = function (endpoint, username, password) {

    const params = new URLSearchParams();
    params.append('username', username);
    params.append('password', password);
    params.append('login-form-type', 'pwd');

    return axios
        .post(`${endpoint}/pkmslogin.form`, params, {
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            },
            maxRedirects: 0
        })
        .then(() => {

            throw Error('RESPONSE OK, but ERROR');
        })
        .catch((e) => {

            if (e.response && e.response.status === 302) {
                const setCookies = e.response.headers['set-cookie'];

                return setCookies
                    .map((c) => {

                        return c.split(';')[0];
                    })
                    .join(';');
            }

            throw e;
        });
};

const getAuthCode = function (endpoint, horizonClientId, cookie) {

    return axios
        .get(`${endpoint}/FedSSO/ApigeeWAMService/login`, {
            headers: {
                Clientid: horizonClientId,
                Cookie: cookie
            }
        })
        .then((response) => {

            if (response.data && response.data.data && response.data.data.authcode) {
                return response.data.data.authcode;
            }

            throw new Error('No authcode');
        });
};

const loginPager = function (endpoint, authCode) {

    return axios
        .post(`${endpoint}/authentication/login`, {
            authCode
        })
        .then((response) => {

            if (
                response &&
                response.headers &&
                response.headers['armor-session-token']
            ) {
                return response.headers['armor-session-token'];
            }

            throw new Error('No Token Response');
        });
};

exports.handler = async function (argv) {

    const { username, password, environment } = argv;

    const env = envs[environment];

    try {

        const cookie = await loginHorizon(env.horizon, username, password);
        const authcode = await getAuthCode(env.horizon, env.horizonClientId, cookie);
        const token = await loginPager(env.pager, authcode);

        console.log(token);
        return token;
    }
    catch (err) {
        console.log(err);
    }
};
