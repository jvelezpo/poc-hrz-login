'use strict';

const Axios = require('axios');
// const fs = require('fs')
const CliSpinners = require('cli-spinners');
const Ora = require('ora');
const Base64 = require('base-64');
const Yaml = require('js-yaml');
const Nodemailer = require('nodemailer');

const {
    APP_CONSTANTS
} = require('../../pager-cli-properties.js');

const spinner = Ora(CliSpinners.dots);

const LIST_OF_APPS = [
  'alfred',
  'austero',
  'api-admin',
  'api-auth',
  'api-command-center',
  'api-config',
  'api-core',
  'api-demographics',
  'api-horizon',
  'api-insurance',
  'api-messages',
  'api-profile',
  'api-scheduling',
  'api-sdk',
  'api-telemedicine',
  'api-tests',
  'api-twilio',
  'api-users',
  'broadcast',
  'chappie',
  'charts',
  'chrono-trigger',
  'command-center-worker',
  'dealer',
  'docker-cloud-sdk',
  'docker-kong',
  'docker-metabase',
  'docker-newrelic',
  'docker-nginx-frontend',
  'docker-sentry',
  'droidcast',
  'edge-api-admin',
  'edge-api-base',
  'edge-api-cc',
  'enterprise-admin',
  'environments',
  'eslint-config',
  'event-sourcerer',
  'faro',
  'google-puppeteer',
  'hapi-auth-armor',
  'horizon-transcripts',
  'infra',
  'init-containers',
  'json-schemas',
  'linda',
  'lucy',
  'mailman',
  'maryam',
  'mongoose-schemas',
  'pager-cli',
  'pager-ui-kit',
  'playwright-automation',
  'python-automation',
  'qa-pager-test',
  'salesman',
  'sdk-states',
  'semantic-release-config',
  'service-chat-data-migrator',
  'socker',
  'scribe',
  'stash',
  'telemedicine-worker',
  'tenant-middleware-cambia',
  'tenant-middleware-healthsparq',
  'tenant-middleware-horizon',
  'tenant-middleware-sura',
  'thalamus',
  'webhooks',
  'web-app',
  'web-command-center',
  'web-covid',
  'web-dashboard',
  'web-ea',
  'worker-guest-session'
];

const getDeployShasFromCharts = async function (repoList = LIST_OF_APPS, path = 'values.yaml') {

    spinner.text = 'Connecting to Github...';
    spinner.start();

    const promiseList = repoList.map(
        (repo) => Axios({
            method: 'get',
            url: `${APP_CONSTANTS.GITHUB_API_URL}/repos/pagerinc/charts/contents/${repo}/${path}?access_token=${process.env.GITHUB_ACCESS_TOKEN}`
        })
    );

    const responseList = await Promise.all(promiseList);
    const result = {};

    responseList.forEach((res, index) => {
        const { image } = Yaml.load(Base64.decode(res.data.content), 'utf8');
        result[repoList[index]] = { sha: image.tag };
    });

    spinner.stop();
    return result;
};

const getMasterCommitSha = async function getMasterCommitSha(repoList = LIST_OF_APPS) {

    spinner.text = 'Connecting to Github...';
    spinner.start();

    const promiseList = repoList.map(
        (repo) => Axios({
            method: 'get',
            url: `${APP_CONSTANTS.GITHUB_API_URL}/repos/pagerinc/${repo}/commits?access_token=${process.env.GITHUB_ACCESS_TOKEN}`
        })
    );

    const responseList = await Promise.all(promiseList);
    const result = {};

    responseList.forEach((res, index) => {
        result[repoList[index]] = {
            ...res.data[0]
        };
    });

    spinner.stop();
    return result;
};

const sendEmail = async function (author, email, app, masterSha, chartsSha, date) {

    const transporter = Nodemailer.createTransport({
        host: 'smtp.gmail.com',
        port: 587,
        secure: false,
        auth: {
            user: process.env.GMAIL_EMAIL,
            pass: process.env.GMAIL_APP_PASSWORD
        }
    });

    const info = await transporter.sendMail({
        from: 'maintenance-support@pager.com',
        to: `${email}`,
        cc: `maintenance-support@pager.com`,
        bcc: `sameer@pager.com`,
        subject: 'Notification: Deploy Process Violation',
        text: `
<p>Hi ${author},</p>

<p>You are receiving this email because you landed the latest ${app} master commit on ${date} but didn't update the corresponding sha in Charts.  Latest shas for ${app}:
  <ol>
    <li>master: ${masterSha}</li>
    <li>Charts: ${chartsSha}</li>
  </ol>
Please update Charts.</p>

<p>To see ${app} changes between Charts sha and master sha, checkout the <a href="https://github.com/pagerinc/${app}/compare/${chartsSha}...master">comparison</a> on github.</p>

<p>Going forward, please keep in mind our <a href="https://pagerinc.atlassian.net/wiki/spaces/EN/pages/275709956/How+to+Deploy+to+Production">deployment process</a> and ensure that
Charts is kept up-to-date with master.</p>

<p>If you have any questions or concerns, feel free to reach out to the platform team.</p>

<p>Regards,</p>

<p>Platform Team</p>
      `,
        html: `
<p>Hi ${author},</p>

<p>You are receiving this email because you landed the latest ${app} master commit on ${date} but didn't update the corresponding sha in Charts.  Latest shas for ${app}:
  <ol>
    <li>master: ${masterSha}</li>
    <li>Charts: ${chartsSha}</li>
  </ol>
Please update Charts.</p>

<p>To see ${app} changes between Charts sha and master sha, checkout the <a href="https://github.com/pagerinc/${app}/compare/${chartsSha}...master">comparison</a> on github.</p>

<p>Going forward, please keep in mind our <a href="https://pagerinc.atlassian.net/wiki/spaces/EN/pages/275709956/How+to+Deploy+to+Production">deployment process</a> and ensure that
Charts is kept up-to-date with master.</p>

<p>If you have any questions or concerns, feel free to reach out to the platform team.</p>

<p>Regards,</p>

<p>Platform Team</p>
      `
    });

    console.log('Message sent: %s', info.messageId);
    console.log('Preview URL: %s', Nodemailer.getTestMessageUrl(info));
};

const sendShaMailings = async function (argv) {

    const { rowFilter } = argv;
    let rows = LIST_OF_APPS;

    if (rowFilter) {
        if (Array.isArray(rowFilter)) {
            rows = rows.filter((x) => rowFilter.includes(x));
        }
        else {
            rows = rows.filter((x) => rowFilter === x);
        }
    }

    const masterCommitShas = await getMasterCommitSha(rows);
    const deployShasFromCharts = await getDeployShasFromCharts(rows);
    const mailingList = [];

    Object.keys(masterCommitShas).forEach((app) => {
        const masterSha = masterCommitShas[app].sha.slice(0, 7);
        const chartsSha = deployShasFromCharts[app].sha;
        if (masterSha !== chartsSha) {
            const { commit } = masterCommitShas[app];
            const { author } = commit;
            const { name, date, email } = author;
            if (email.indexOf('renovate') < 0) {
                mailingList.push({
                    masterSha,
                    chartsSha,
                    name,
                    app,
                    date,
                    email
                });
            }
        }
    });

    console.log(mailingList);
    // const promiseList = mailingList.map(recipient => {
    //   const { name, email, app, masterSha, chartsSha } = recipient
    //   sendEmail(name, email, app, masterSha, chartsSha, date)
    // })
    //
    // await Promise.all(promiseList)

    return masterCommitShas;
};

module.exports = {
    sendShaMailings
};
