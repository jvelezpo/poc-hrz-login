'use strict';

const axios = require('axios');
const cliSpinners = require('cli-spinners');
const ora = require('ora');
const base64 = require('base-64');
const colors = require('colors');
const semver = require('semver');
const pLimit = require('p-limit');
const { DockerfileParser } = require('dockerfile-ast');
const {
    table,
    getBorderCharacters
} = require('table');

const limit = pLimit(5);

const {
    APP_CONSTANTS
} = require('../../pager-cli-properties.js');
const { LIST_OF_DEPENDENCIES, LIST_OF_ALL_APPS, LIST_OF_BACKEND_APPS } = require('./constants');

let outOfDate = 0;
let upToDate = 0;

const spinner = ora(cliSpinners.dots);

const getContentFromRepo = async function (repoList = [], path = 'package-lock.json', isJson = true) {

    spinner.text = 'Connecting to GitHub...';
    spinner.start();

    const promiseList = repoList.map(
        // eslint-disable-next-line @hapi/hapi/scope-start
        (repo) => limit(() => axios({
            method: 'get',
            url: `${APP_CONSTANTS.GITHUB_API_URL}/repos/pagerinc/${repo}/contents/${path}?access_token=${process.env.GITHUB_ACCESS_TOKEN}`
        }).catch((error) => {

            if (error.response && error.response.status === 404) {
                return;
            }

            // handle error
            console.log(error);
        }))
    );

    const responseList = await Promise.all(promiseList);

    spinner.text = 'Parsing GitHub response...';

    return responseList.map((res) => {

        if (!res || !res.data) {
            return {};
        }

        const base64Decoded = base64.decode(res.data.content);

        return isJson ? JSON.parse(base64Decoded) : base64Decoded;
    });
};

const highlightVersion = function (version, atLeast = '0.0.0') {

    if (semver.lt(version, atLeast)) {
        outOfDate++;
        return colors.red(version);
    }

    upToDate++;
    return colors.green(version);
};

const highlightCount = function (count) {

    if (count >= 5) {
        outOfDate++;
        return colors.red(count);
    }

    upToDate++;
    return colors.green(count);
};

const getMigrationDataByDependency = async function (dependencyList = LIST_OF_DEPENDENCIES) {

    const packageLocks = await getContentFromRepo(LIST_OF_BACKEND_APPS);
    const packageJsons = await getContentFromRepo(LIST_OF_BACKEND_APPS, 'package.json');
    const dockerfiles = await getContentFromRepo(LIST_OF_BACKEND_APPS, 'Dockerfile', false);
    spinner.stop();
    const result = packageLocks.map((packageLock, index) => {

        const versionList = dependencyList.map((obj) => {

            if (packageJsons[index].dependencies && packageJsons[index].dependencies[obj.name] && packageLock.dependencies && packageLock.dependencies[obj.name]) {
                return highlightVersion(packageLock.dependencies[obj.name].version, obj.atLeast);
            }

            if (packageJsons[index].devDependencies && packageJsons[index].devDependencies[obj.name] && packageLock.dependencies && packageLock.dependencies[obj.name]) {
                return highlightVersion(packageLock.dependencies[obj.name].version, obj.atLeast);
            }

            return 'N/A';
        });

        let parsedVersion = false;
        if (dockerfiles[index]) {
            const parsedDockerFile = DockerfileParser.parse(dockerfiles[index]);
            if (parsedDockerFile.getFROMs()[0]) {
                parsedVersion = parsedDockerFile.getFROMs()[0].getImageName().replace('node:', '').split('-')[0];
            }
        }

        parsedVersion = semver.valid(semver.coerce(parsedVersion));

        const nodeVersion = parsedVersion ? highlightVersion(parsedVersion, '12.14.0') : 'N/A';

        return [LIST_OF_BACKEND_APPS[index], packageLock.version || 'N/A', nodeVersion, ...versionList];
    });

    return [['app name', 'app version', 'node', ...dependencyList.map((obj) => obj.name)], ...result];
};

const getPRCountByApp = async function (appList = LIST_OF_ALL_APPS) {

    spinner.text = 'Connecting to Github...';
    spinner.start();

    const promiseList = appList.map(
        // eslint-disable-next-line @hapi/hapi/scope-start
        (repo) => limit(() => axios({
            method: 'get',
            url: `${APP_CONSTANTS.GITHUB_API_URL}/repos/pagerinc/${repo}/pulls?access_token=${process.env.GITHUB_ACCESS_TOKEN}`
        }))
    );

    const responseList = await Promise.all(promiseList);
    spinner.stop();

    return responseList.map((res, index) => {

        return [appList[index], highlightCount(JSON.parse(res.data.length))];
    });
};

const getMigrationTable = async function (argv) {

    const output = table(
        await getMigrationDataByDependency(argv.dependencies ? JSON.parse(argv.dependencies) : undefined),
        getBorderCharacters('honeywell')
    );

    console.log(`\n ${output} \n`);
    console.log(`out-of-date: \n${outOfDate}, ${outOfDate ? (outOfDate / (upToDate + outOfDate) * 100).toFixed(1) + '%' : 'N/A'}`);
};

const getPRCountTable = async function (argv) {

    const data = await getPRCountByApp(argv.dependencies ? JSON.parse(argv.dependencies) : undefined);

    const output = table(
        data,
        getBorderCharacters('honeywell')
    );

    console.log(`\n${output}\n`);
};

module.exports = {
    getMigrationTable,
    getPRCountTable
};
