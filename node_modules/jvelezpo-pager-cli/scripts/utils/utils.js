'use strict';

const CliSpinners = require('cli-spinners');
const Ora = require('ora');
const Axios = require('axios');
const {
    table,
    getBorderCharacters
} = require('table');

const {
    APP_CONSTANTS
} = require('../../pager-cli-properties.js');

const { GITHUB_API_KEY } = process.env;

const spinner = Ora(CliSpinners.dots);

const startAjaxCall = function (hashId = '') {

    spinner.text = 'Connecting to Github...';
    spinner.start();
    return Axios({
        method: 'get',
        url: `${APP_CONSTANTS.GITHUB_API_ORIGIN}/apis/v1/environments/${hashId}?format=json`,
        headers: {
            Authorization: `Token ${GITHUB_API_KEY}`
        }
    }).catch((error) => error);
};

const listEnvs = function (sort) {

    let data = [];

    return startAjaxCall().then((result) => {

        spinner.stop();
        return Promise.all(result.data.map((item) => startAjaxCall(item.id)));
    }).then((result) => {

        spinner.stop();
        data.push(...result.map((item) => {
            // Only add the release branch to the output if the environment has one
            let releaseBranch = '';
            try {
                releaseBranch = item.data.component.parameters.filter((element) => element.name === 'release')[0].value;
            }
            catch (e) {
                releaseBranch = 'N/A';
            }

            return [item.data.name, releaseBranch, item.data.id, item.data.state, item.data.group];
        }));
        if (sort) {
            const map = {
                name: 0,
                branch: 1,
                id: 2,
                state: 3,
                group: 4
            };
            data = data.sort((a, b) => {

                if (a[map[sort]] > b[map[sort]]) {
                    return 1;
                }
                else if (a[map[sort]] < b[map[sort]]) {
                    return -1;
                }

                return 0;
            });
        }

        data.unshift(['name', 'branch', 'id', 'state', 'group']);
        const output = table(data, getBorderCharacters('honeywell'));
        console.log(`\n${output}`);
        return true;
    }).catch((error) => error);
};

module.exports = {
    listEnvs
};
