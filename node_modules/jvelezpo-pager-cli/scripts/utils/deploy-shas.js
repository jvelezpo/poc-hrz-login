/* eslint-disable @hapi/hapi/scope-start */
'use strict';

const axios = require('axios');
// const fs = require('fs')
const cliSpinners = require('cli-spinners');
const ora = require('ora');
const base64 = require('base-64');
const colors = require('colors');
const yaml = require('js-yaml');
const pLimit = require('p-limit');
const {
    table,
    getBorderCharacters
} = require('table');

const limit = pLimit(5);

const { K8S_ENVIRONMENTS_RELEASES, APTIBLE_ENVIRONMENT_NAMES } = require('./constants');
const {
    APP_CONSTANTS
} = require('../../pager-cli-properties.js');

const spinner = ora(cliSpinners.dots);

const LIST_OF_APPS = [
    'alfred',
    'api-admin',
    'api-auth',
    'api-command-center',
    'api-config',
    'api-core',
    'api-demographics',
    'api-horizon',
    'api-insurance',
    'api-messages',
    'api-profile',
    'api-scheduling',
    'api-sdk',
    'api-telemedicine',
    'api-twilio',
    'austero',
    'broadcast',
    'chappie',
    'chrono-trigger',
    'command-center-worker',
    'dealer',
    'droidcast',
    'edge-api-admin',
    'edge-api-base',
    'edge-api-cc',
    'event-sourcerer',
    'faro',
    'linda',
    'mailman',
    'maryam',
    'salesman',
    'service-chat-data-migrator',
    'socker',
    'stash',
    'telemedicine-worker',
    'tenant-middleware-cambia',
    'tenant-middleware-healthsparq',
    'tenant-middleware-horizon',
    'tenant-middleware-sura',
    'webhooks',
    'web-app',
    'web-covid',
    'worker-guest-session'
];

const util = require('util');

const exec = util.promisify(require('child_process').exec);

const getManifestFromAptible = async function (env = 'pager-production') {

    const cmdPromiseList = [];

    for (let i = 0; i < 6; ++i) {
        const cmd = `aptible inspect https://api.aptible.com/apps?page=${i} | jq ._embedded.apps | jq '.[] | select(.git_repo|test("git@beta.aptible.com:${env}."))' | jq ._embedded.last_deploy_operation.env.APTIBLE_DOCKER_IMAGE`;
        cmdPromiseList.push(exec(cmd));
    }

    const t = await Promise.all(cmdPromiseList);
    const t2 = t.map((item) => {

        return item.stdout.split(`\n`);
    });
    const t3 = {};

    t2.flat().forEach((item) => {

        if (item.indexOf('production-197117') > -1) {
            const [name, sha] = item.replace('gcr.io/production-197117/pagerinc', '').replace('"', '').replace('/', '').replace('"', '').split(':');
            t3[name] = { image: { tag: sha } };
        }
    });

    return t3;
};

const getDeployShasFromCharts = async function (repoList = LIST_OF_APPS, path = 'values.yaml') {

    spinner.text = 'Connecting to Github...';
    spinner.start();
    const promiseList = repoList.map(
        // eslint-disable-next-line @hapi/hapi/scope-start
        (repo) => limit(() => axios({
            method: 'get',
            url: `${APP_CONSTANTS.GITHUB_API_URL}/repos/pagerinc/charts/contents/${repo}/${path}?access_token=${process.env.GITHUB_ACCESS_TOKEN}`
        }))
    );
    const responseList = await Promise.all(promiseList);
    const result = {};
    responseList.forEach((res, index) => {

        const { image } = yaml.load(base64.decode(res.data.content), 'utf8');
        result[repoList[index]] = { image: { tag: image.tag } };
    });
    return result;
};

const getMasterCommitSha = async function (repoList = LIST_OF_APPS) {

    spinner.text = 'Connecting to Github...';
    spinner.start();
    const promiseList = repoList.map(
        // eslint-disable-next-line @hapi/hapi/scope-start
        (repo) => limit(() => axios({
            method: 'get',
            url: `${APP_CONSTANTS.GITHUB_API_URL}/repos/pagerinc/${repo}/commits?access_token=${process.env.GITHUB_ACCESS_TOKEN}`
        }))
    );
    const responseList = await Promise.all(promiseList);
    const result = {};

    responseList.forEach((res, index) => {

        result[repoList[index]] = { image: { tag: res.data[0].sha.slice(0, 7) } };
    });

    return result;
};

const getRepoTags = async function (repoList = LIST_OF_APPS) {

    spinner.text = 'Connecting to Github...';
    spinner.start();
    const promiseList = repoList.map(
        (repo) => limit(() => axios({
            method: 'get',
            url: `${APP_CONSTANTS.GITHUB_API_URL}/repos/pagerinc/${repo}/tags?access_token=${process.env.GITHUB_ACCESS_TOKEN}`
        }))
    );
    const responseList = await Promise.all(promiseList);
    const result = {};

    responseList.forEach((res, index) => {

        if (!res.data[0]) {
            result[repoList[index]] = {
                image: {
                    tag: 'N/A'
                }
            };
            return;
        }

        result[repoList[index]] = {
            image: {
                tag: res.data[0].name,
                commit: res.data[0].commit.sha.slice(0, 7)
            }
        };
    });

    return result;
};

const getManifestFileContent = async function (rows, columns, path = 'manifest.yaml') {

    spinner.text = 'Connecting to Github...';
    spinner.start();
    // const writeJSONtoDisk = function(name,data){
    //     const {join} = require('path');
    //     const parsedData = JSON.stringify(data, null, 4);
    //     fs.writeFileSync(join(__dirname,'../..',`data/test-data/${name}-manifest.json`), parsedData, (err)=>{ console.log(err)});
    // }
    const k8sColumnHeaders = K8S_ENVIRONMENTS_RELEASES.filter((x) => columns.includes(x));
    const org = 'pagerinc';
    const promiseList = k8sColumnHeaders.map((release) =>
        limit(() => axios({
            method: 'get',
            url: `${APP_CONSTANTS.GITHUB_API_URL}/repos/${org}/environments/contents/releases/${release}/${path}?access_token=${process.env.GITHUB_ACCESS_TOKEN}`
        }))
    );

    const responseList = await Promise.all(promiseList);

    const k8sDeployShas = responseList.map((res, i) => {
        const data = yaml.load(base64.decode(res.data.content), 'utf8');
        const keys = Object.keys(data).filter((x) => rows.includes(x));
        const result = {};
        keys.forEach((element) => {
            result[element] = data[element];
        });
        // writeJSONtoDisk(K8S_ENVIRONMENT_LIST[index].repo, result);
        return result;
    });

    // const aptibleDeployShas = await Promise.all(
    //   ['pager-production','horizon-production'].map(x => getManifestFromAptible(x))
    // )

    const masterCommitAndTagAndChartsShas = await Promise.all([
        getMasterCommitSha(rows),
        getRepoTags(rows),
        getDeployShasFromCharts(rows)
    ]);

    const list = [...masterCommitAndTagAndChartsShas];
    if (k8sDeployShas.length > 0) {
        list.push(...k8sDeployShas);
    }

    // if (aptibleDeployShas.length > 0) {
    //   list.push(...aptibleDeployShas)
    // }

    spinner.stop();
    // const data = require('../../data/test-data/deploy-sha-data');
    return convertToTableData(list, rows, [...k8sColumnHeaders]);
};

const convertToTableData = function (data, rows, columns) {

    const result = {};
    const columnHeaders = ['app', 'master', 'tag (commit)', 'charts'];

    if (columns.length > 0) {
        columnHeaders.push(...columns);
    }

    const colorAndLink = function (env, app, i) {
        const chartsIndex = 2;

        if (env[app] && env[app].image) {
            if (result[app]) {
                if (env[app].image.commit) {
                    return colors.cyan(`${env[app].image.tag} (${env[app].image.commit})`);
                }

                if (env[app].image.tag) {
                    if (i === chartsIndex) {
                        return colors.green(env[app].image.tag);
                    }

                    return colors.yellow(env[app].image.tag);
                }

                return colors.green(data[chartsIndex][app].image.tag);
            }

            if (env[app].image.tag) {
                return [colors.magenta(env[app].image.tag)];
            }

            return [colors.green(data[chartsIndex][app].image.tag)];
        }

        if (result[app]) {
            return colors.green(data[chartsIndex][app].image.tag);
        }

        return [colors.green(data[chartsIndex][app].image.tag)];
    };

    data.forEach((env, i) => {

        rows.forEach((app, j) => {

            const sha = colorAndLink(env, app, i);
            if (Array.isArray(sha)) {
                result[app] = sha;
            }
            else {
                result[app].push(sha);
            }
        });
    });

    const x = Object.keys(result).map((item) => {

        return [item, ...result[item]];
    });

    x.unshift(columnHeaders);
    return x;
};

const getDeployShaTable = async function (argv) {

    const { rowFilter, columnFilter } = argv;
    let rows = LIST_OF_APPS;
    let columns = [...K8S_ENVIRONMENTS_RELEASES, ...APTIBLE_ENVIRONMENT_NAMES];

    if (rowFilter) {
        if (Array.isArray(rowFilter)) {
            rows = rows.filter((x) => rowFilter.includes(x));
        }
        else {
            rows = rows.filter((x) => rowFilter === x);
        }
    }

    if (columnFilter) {
        if (Array.isArray(columnFilter)) {
            columns = columns.filter((x) => columnFilter.includes(x));
        }
        else {
            columns = columns.filter((x) => columnFilter === x);
        }
    }

    const data = await getManifestFileContent(rows, columns);

    const output = table(
        data,
        getBorderCharacters('honeywell')
    );

    console.log(`\n${output}`);
    return data;
};

module.exports = {
    getDeployShaTable
};
